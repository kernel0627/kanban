// boardStore.js

import {ref} from 'vue'
import {defineStore} from 'pinia'
import axios from 'axios'

export const useBoardStore = defineStore('board', () =>{
    const boards = ref([])
    const currentBoard = ref(null)
    const isLoading = ref(false)

    async function fetchBoards(){
        isLoading.value = true
        try{
            const response = await axios.get('/boards')
            boards.value = response.data
        }catch(err){
            console.error('Error fetching boards:', err)
        }finally{
            isLoading.value = false
        }
    }

    async function fetchBoard(id){
        isLoading.value = true
        currentBoard.value = null
        try{
            const response = await axios.get(`/boards/${id}`)
            currentBoard.value = response.data
        }catch(err){
            console.error(`Failed to fetch board ${id}`, err)
        }finally{
            isLoading.value = false
        }
    }

    async function createBoard(title){
        try{
            const response = await axios.post('/boards', {title})
            boards.value.push(response.data)
            return response.data
        }catch(err){
            console.error('Failed to create board', err)
            throw err
        }
    }
    async function createList(boardId,title){
        try{
            const response = await axios.post(`/boards/${boardId}/lists`, {title})
            await fetchBoard(boardId)

        }catch(err){
            console.error('Failed to create board', err)
            throw err
        }
    }

    async function updateListTitle(listId, newTitle) {
        try {
            await axios.put(`/lists/${listId}`, { title: newTitle })
            const list = currentBoard.value?.lists.find(l => l.id === listId)
            if (list) {
                list.title = newTitle
            }
        } catch (err) {
            console.error('Failed to update list title', err)
            throw err
        }

    }

    async function deleteList(listId) {
        try {
            await axios.delete(`/lists/${listId}`)
            if (currentBoard.value) {
                const listIndex = currentBoard.value.lists.findIndex(l => l.id === listId)
                if (listIndex !== -1) {
                    currentBoard.value.lists.splice(listIndex, 1)
                }
            }
        } catch (err) {
            console.error('Failed to delete list', err)
            throw err
        }
    }


    async function createCard(listId,content){
        try{
            const response = await axios.post(`/lists/${listId}/cards`, {content})
            const list = currentBoard.value.lists.find(l => l.id === listId)

            if (list){
                if(!list.cards){
                    list.cards = []
                }
                list.cards.push(response.data)
            }
            return response.data
        }catch(err){
            console.error('Failed to create card', err)
            throw err
        }
    }

    async function updateCardContent(cardId, newContent) {
        try{
            await axios.put(`/cards/${cardId}` , {content: newContent})

            currentBoard.value.lists.forEach(list => {
                const card = list.cards?.find(c => c.id === cardId) 
                if (card) card.content = newContent
            })
        }catch(err){
            console.error('Failed to update card content', err)
            throw err
        }
    }

    async function deleteCard(listId , cardId) {
        try{
            await axios.delete(`/cards/${cardId}`)

            const list = currentBoard.value?.lists.find(l => l.id === listId)
            if(list) {
                const cardIndex = list.cards?.findIndex(c => c.id === cardId)
                if (cardIndex !== -1){
                    list.cards.splice(cardIndex, 1)
                }
            }
        }catch(err){
            console.error('Failed to delete card', err)
            throw err
        }
    }
    



    return {boards, currentBoard, isLoading, fetchBoards, fetchBoard, createBoard, createList, createCard , updateListTitle, deleteList , updateCardContent, deleteCard}


})

<!-- TaskCard.vue -->
<template> 
    <div class="bg-white p-3 rounded-md shadow-sm cursor-pointer border-b hover:bg-gray-200 group">
        <div class="absolute top-1 right-1 flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
            <button @click="startEditing" class="w-6 h-6 text-sm text-gray-500 hover:text-blue-600 flex items-center justify-center rounded hover:bg-gray-200">Edit</button>
            <button @click="handleDeleteCard" class="w-6 h-6 text-sm text-gray-500 hover:text-red-500 flex items-center justify-center rounded hover:bg-gray-200">Delete</button>
        </div>

        <div v-if="!isEditing" @click="startEditing" class="cursor-pointer">
            <p class="text-sm text-gray-800 whitespace-pre-wrap">{{ card.content }}</p>
        </div>
        <div v-else >
            <textarea 
            ref="cardTextarea"
            v-model="editedContent"
            @blur="handleUpdateCard"
            @keyup.enter.prevent="handleUpdateCard"
            @keyup.esc="isEditing = false"
            class="w-full p-2 border-blue-500 border-2 rounded-md focus:outline-none resize-none"
            rows="3">
            </textarea>
            <button @click="handleUpdateCard" class="px-3 py-1 mt-2 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700">Save</button>
            <button @click="isEditing = false" class="px-3 py-1 mt-2 bg-gray-300 text-gray-800 text-sm rounded-md hover:bg-gray-400">Cancel</button>
        </div>
    </div>

</template>

<script setup>
import {ref , nextTick} from 'vue';
import { useBoardStore } from '../../stores/boardStore';
const boardStore = useBoardStore();

const props = defineProps({
    listId:{type:Number,required:true},
    card:{type:Object,required:true}
})

// const emit = defineEmits(['update-card','delete-card'])

const isEditing = ref(false)
const editedContent = ref(props.card.content)
const cardTextarea = ref(null)

function startEditing(){
    isEditing.value = true 
    editedContent.value = props.card.content 
    nextTick(() => {
        cardTextarea.value?.focus()
    })
}

async function handleUpdateCard(){
    if (editedContent.value.trim() === '' || editedContent.value.trim() === props.card.content){
        isEditing.value = false;
        return;
    }
    // emit('update-card', {
    //     cardId: props.card.id , 
    //     newContent: editedContent.value.trim()
    // })

    await boardStore.updateCardContent(props.listId, props.card.id, editedContent.value.trim());
    isEditing.value = false;
}

async function handleDeleteCard(){
    if (confirm('Are you sure you want to delete this card?')){
        // emit('delete-card', props.card.id)
        await boardStore.deleteCard(props.listId, props.card.id);
    }
}



    

</script>
<!-- TaskList.vue -->
<template> 
    <div class="w-72 bg-gray-100 rounded-lg shadow-md p-3 flex-shrink-0 h-full ">
        <div class="flex items-center justify-between mb-4 px-1">
            <h2
              v-if="!isEditingTitle"
              @click="startEditingTitle"
              class="text-lg font-bold 
              text-gray-800 mb-4">
              {{ list.title }}
            </h2>
            <input type="text"
            v-else
            ref="titleInput"
            v-model="editedTitle"
            @keyup.enter="handleUpdateTitle"
            @blur="handleUpdateTitle"
            @keyup.esc="isEditingTitle = false"
            class="w-full p-1 border-2 border-blue-500 rounded-md focus:outline-none"
            />
            <button @click="handleDeleteList" class="ml-2 text-xl hover:text-red-500 flex-shrink-0 text-gray-500">&times;</button>
        </div>
        <div class="space-y-3 overflow-y-auto flex-grow">
            <!-- <TaskCard
                v-for="card in list.cards"
                :key="card.id"
                :card="card"
                @update-card="$emit('update-card',$event)"
                @delete-card="$emit('delete-card',$event)"
            /> -->
            <TaskCard
                v-for="card in list.cards"
                :key="card.id"
                :card="card"
                :listId="list.id"
            />
        </div>
    
        <div class="mt-4">
            <div v-if="!isAddingCard">
                <button 
                    @click="showAddCardForm"
                    class="w-full text-left px-2 py-1.5 text-gray-500 hover:bg-gray-500 rounded-md transition-colors">
                    + Add Card
                </button>

            </div>
            <div v-else>
                <textarea 
                    ref="newCardTextarea"
                    v-model="newCardContent"
                    @keyup.enter.prevent="handleAddCard"
                    placeholder="Enter card content..."
                    class="w-full p-2 rounded border border-gray-300 
                    focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none">
                </textarea>
                <div class="mt-2">
                <button 
                    @click="handleAddCard"
                    class="px-4 py-2 bg-blue-600 text-white font-semibold rounded-md
                  hover:bg-blue-700">
                    Add Card
                </button>
                <button
                    @click="isAddingCard = false"
                    class="ml-2 text-gray-500 hover:text-gray-700">
                    Cancel
                </button>
                </div>
            </div>
            
        </div>
    </div>

</template>

<script setup>
import {ref, nextTick} from 'vue';
import TaskCard from './TaskCard.vue';
import { useBoardStore } from '../../stores/boardStore';

const props = defineProps({
    list:{
        type:Object,
        required:true
    }
})

// const emit = defineEmits(['add-card','update-list-title' , 'delete-list' , 'update-card' , 'delete-card'])

const boardStore = useBoardStore();
const isAddingCard = ref(false);
const newCardContent = ref('');
const newCardTextarea = ref(null);

const isEditingTitle = ref(false)
const editedTitle = ref(props.list.title)
const titleInput = ref(null)

function showAddCardForm(){
    isAddingCard.value = true 
    nextTick(() => {
        newCardTextarea.value?.focus()
    })
}

async function handleAddCard(){
    if (newCardContent.value.trim() === ''){
        isAddingCard.value = false;
        return;
    }

    // emit('add-card', {
    //     listId: props.list.id,
    //     content: newCardContent.value.trim()
    // })
    await boardStore.createCard(props.list.id, newCardContent.value.trim());

    // console.log(newCardContent.value)
    
    newCardContent.value = '' 
    // isAddingCard.value = false;
}

function startEditingTitle(){
    isEditingTitle.value = true 
    editedTitle.value = props.list.title
    nextTick(() => {
        titleInput.value?.select()
    })
}

async function handleUpdateTitle(){
    if (editedTitle.value.trim() === ''){
        isEditingTitle.value = false
        return 
    }
    // emit('update-list-title', {
    //     listId: props.list.id,
    //     newTitle: editedTitle.value.trim()
    // })

    await boardStore.updateListTitle(props.list.id , editedTitle.value.trim())
    isEditingTitle.value = false
}

async function handleDeleteList(){
    if (confirm('Are you sure you want to delete this list?')){
        // emit('delete-list', props.list.id)
        await boardStore.deleteList(props.list.id);
    }
}



</script>
<!-- BoardView.vue -->
<template> 
    
    <div v-if="boardStore.isLoading || !boardStore.currentBoard" class="p-8 text-center">Loading...</div>
    <div v-else-if="!boardStore.currentBoard" class="p-8 text-center">Board not found</div>
    <div v-else class="p-8 h-screen flex flex-col">
        <h1 class="text-4xl font-bold text-gray-700 tracking-tight mb-8 flex-shrink-0">
            {{ boardStore.currentBoard.title }}
        </h1>

        <div class="flex items-start overflow-x-auto pb-4 flex-grow">
            <div class="flex space-x-6 h-full">
                <TaskList
                    v-for="list in boardStore.currentBoard.lists"
                    :key="list.id"
                    :list="list"
                    />

                <div class="w-72 flex-shrink-0">
                    <div v-if="!isAddingList">
                        <button @click="showAddListForm" class="w-full p-3 flex items-center justify-center font-semibold text-gray-500 bg-white/50 border-2 border-dashed border-gray-400 hover:bg-blue-500 hover:text-white hover:border-solid hover:border-blue-500 transition-all duration-300">
                            + Add List
                        </button>
                    </div>
                    <div v-else class="bg-gray-200 rounded-lg p-3">
                        <input 
                        ref="newListInput"
                        v-model="newListTitle"
                        @keyup.enter="handleCreateList"
                        placeholder="Enter list title..."
                        class="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        type="text">
                        <div class="mt-2 flex items-center">
                            <button 
                            @click="handleCreateList"
                            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                            Add List
                            </button>
                            <button 
                            @click="isAddingList = false"
                            class="ml-2 text-gray-500 hover:text-gray-700"
                            >Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</template>

<script setup>
import {onMounted , computed , ref , nextTick} from 'vue';
import { useRoute } from 'vue-router';
import {useBoardStore} from '../stores/boardStore';
import TaskList from '../components/DashBoard/TaskList.vue';

const route = useRoute();
const boardStore = useBoardStore();
const boardId = computed(() => route.params.id);

const isAddingList = ref(false);
const newListTitle = ref('');
const newListInput = ref(null);

onMounted(() => {
    boardStore.fetchBoard(boardId.value);
})

function showAddListForm(){
    isAddingList.value = true 
    nextTick(() => {
        newListInput.value?.focus()
    })
}

async function handleCreateList(){
    if (newListTitle.value.trim() === '')  {
        isAddingList.value = false
        return;
    }

    await boardStore.createList(boardId.value, newListTitle.value.trim());
    newListTitle.value = ''
    // isAddingList.value = false
}


</script>
